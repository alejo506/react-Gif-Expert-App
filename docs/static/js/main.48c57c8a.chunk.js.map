{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","console","log","className","type","placeholder","aria-label","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","cod","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","setCategories","category","ReactDOM","render","document","getElementById"],"mappings":"2OAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAsBhD,OAGI,0BAAMC,SApBW,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,KAEhBO,QAAQC,IAAI,kBAaR,2BAEEC,UAAU,uBAAuBC,KAAK,SAASC,YAAY,SAASC,aAAW,SAC/EC,MAAOd,EACPe,SAbkB,SAACZ,GAGzBF,EAAcE,EAAEa,OAAOF,Y,wBCrBVG,EAAO,uCAAG,WAAQV,GAAR,uBAAAW,EAAA,6DAGbC,EAHa,0FAG4EC,UAAUb,GAHtF,sBAIAc,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,IAAKD,EAAIE,GACTC,MAAOH,EAAIG,MACXX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAZvB,kBAkBZM,GAlBY,4CAAH,sDCEXQ,EAAc,SAAC,GAAyB,IAAvBL,EAAsB,EAAtBA,IAAKE,EAAiB,EAAjBA,MAAOX,EAAU,EAAVA,IAGtC,OADAX,QAAQC,IAAImB,EAAKE,EAAOX,GAEpB,yBAAKT,UAAU,2CACX,yBAAKwB,IAAKf,EAAKT,UAAU,eAAeyB,IAAKL,IAC7C,yBAAKpB,UAAU,aACX,wBAAIA,UAAU,cAAcoB,M,QCL/BM,EAAU,SAAC,GAAe,IAAb7B,EAAY,EAAZA,MAAY,ECFV,SAACA,GAAW,IAAD,EAETR,mBAAS,CAE/ByB,KAAM,GACNa,SAAS,IALsB,mBAE5BC,EAF4B,KAErBC,EAFqB,KAyBnC,OAhBAC,qBAAU,WAENvB,EAAQV,GACHkC,MAAK,SAAAC,GAGFH,EAAS,CAELf,KAAMkB,EACNL,SAAS,SAKtB,CAAC9B,IAEG+B,EDlB2BK,CAAapC,GAAjCwB,EALoB,EAK1BP,KAAca,EALY,EAKZA,QAKtB,OACI,oCACI,gCAAM9B,EAAN,KAEC8B,GAAW,kBAAC,IAAD,MAEZ,yBAAK3B,UAAU,aAIPqB,EAAOL,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,KACLD,UESjBkB,G,MAhCM,WAAM,MAKW9C,mBAAS,CAAC,gBALrB,mBAKlB+C,EALkB,KAKNC,EALM,KAOzB,OACE,oCACE,wBAAIrC,UAAU,yDAAd,iBAEA,kBAAC,EAAD,CAAaZ,cAAeiD,IAC5B,6BAKA,4BAEID,EAAWpB,KAAI,SAAAsB,GAAQ,OAErB,kBAAC,EAAD,CACEJ,IAAKI,EACLzC,MAAOyC,W,MCpBrBC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.48c57c8a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n\r\n  const [inputValue, setInputValue] = useState(''); //Si no se pone el string vacio en el use a un error de que el componente está cambiando incontroladamente, este error es debido a que si no se pone nada el valor es undefined por ende el valor del input value es undefined\r\n\r\n  //Con esta función lo que se quiere hacer es que se escriba algo en la caja de texto y se presione para que muestre algo\r\n  const handleSubmit = (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategorias((categ) => [inputValue, ...categ]);\r\n      setInputValue(\"\");\r\n    }\r\n    console.log(\"Submit hecho\");\r\n  };\r\n\r\n  // Con esta función ya se puede cambiar el valor dentro del input. \r\n  const handleInputChance = (e) => {\r\n\r\n\r\n    setInputValue(e.target.value);\r\n  };\r\n  return (\r\n\r\n    (\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          //Atributos\r\n          className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"\r\n          value={inputValue}\r\n          onChange={handleInputChance}\r\n        />\r\n      </form>\r\n    )\r\n  );\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\r\n\r\n  setCategorias: PropTypes.func.isRequired,\r\n};\r\n","\r\n    // Se necesita la categoria por eso se manda por argumento\r\n    export const getGifs = async ( categ) => {\r\n\r\n        //A la url le agregamos `` y luego cambiamos Rick+adn+Morty por ${ category }, pero ya que la categoría tiene espacios Rick and Morty, entonces hay que escaparlo para que la petición sea correcta , para eso se utiliza. Una vez que hacemos esto aparecen las imagenes de dragon ball ya que estamos mandando la categ al API\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=CA4J6lcxJMzqSiSYilHjueQoiPBfJEia&q=${encodeURI(categ)}&limit=10`\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();// Como necesito la data que viene dentro de la esa data puedo usar desestructuración { data }. Porque es una información en formato JSON la que me recibe esto \r\n\r\n\r\n        const gifs = data.map(img => {\r\n            return { \r\n                cod: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url \r\n\r\n            }\r\n\r\n        })\r\n \r\n        return gifs;\r\n    }\r\n\r\n","\r\nimport React from 'react';\r\n\r\n\r\nexport const GifGridItem = ({ cod, title, url }) => { //Recibe las propiedades de las imagenes de GifGrid //El cod si quiere se puede quitar porque no se está usando acá\r\n\r\n    console.log(cod, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInX\">\r\n            <img src={url} className=\"card-img-top\" alt={title} />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{title}</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { Spinner } from 'react-awesome-spinners';\r\n\r\n\r\nexport const GifGrid = ({ categ }) => {// 1.Recibe la categoría como argumento\r\n\r\n    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    // data: images es para renombrar data, data ahora es images\r\n    const { data: images, loading } = useFetchGifs(categ); //Se almacena en una constante llamada state. Devuelve un objeto {data:[], loading}\r\n\r\n\r\n    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    return (\r\n        <>\r\n            <h2> {categ} </h2>\r\n\r\n            {loading && <Spinner />}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.cod}\r\n                            {...img}\r\n                        />\r\n\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (categ) => {\r\n\r\n    const [state, setstate] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(categ)\r\n            .then(imgs => {\r\n\r\n\r\n                setstate({\r\n\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            })\r\n\r\n    }, [categ]);\r\n\r\n    return state;\r\n}\r\n","\r\nimport React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  // Creando las categorias\r\n\r\n  //Creamos un hook useState\r\n  const [categories, setCategories] = useState(['Dragon Ball']);// Se utiliza solo una categoría para no tener duplicidad en lo que se va  a hacer\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"display-1 animate__animated animate__lightSpeedInLeft\"> GifExpertApp</h1>\r\n      {/*Exportamos la función setCategories al archivo AddCategory \"setCategories = {setCategories}\"  */}\r\n      <AddCategory setCategorias={setCategories} />\r\n      <hr></hr>\r\n\r\n\r\n\r\n      {/* Mostrar las categorias en una lista ordenada */}\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n\r\n            <GifGrid\r\n              key={category}\r\n              categ={category} /> // Se va a enviar la categ que va a ser igual a category(la categoria que está evaluando en ese momento)\r\n\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}