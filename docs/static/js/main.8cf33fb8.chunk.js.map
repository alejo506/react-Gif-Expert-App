{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","className","type","placeholder","aria-label","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","cod","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","setCategories","category","ReactDOM","render","document","getElementById"],"mappings":"2OAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAsBhD,OAGI,0BAAMC,SApBW,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,OAeZ,2BAEEO,UAAU,uBAAuBC,KAAK,SAASC,YAAY,SAASC,aAAW,SAC/EC,MAAOZ,EACPa,SAbkB,SAACV,GAGzBF,EAAcE,EAAEW,OAAOF,Y,wBCrBVG,EAAO,uCAAG,WAAQR,GAAR,uBAAAS,EAAA,6DAGbC,EAHa,0FAG4EC,UAAUX,GAHtF,sBAIAY,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,IAAKD,EAAIE,GACTC,MAAOH,EAAIG,MACXX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAZvB,kBAkBZM,GAlBY,4CAAH,sDCEXQ,EAAc,SAAC,GAAwB,EAAtBL,IAAuB,IAAlBE,EAAiB,EAAjBA,MAAOX,EAAU,EAAVA,IAGtC,OACI,yBAAKT,UAAU,2CACX,yBAAKwB,IAAKf,EAAKT,UAAU,eAAeyB,IAAKL,IAC7C,yBAAKpB,UAAU,aACX,wBAAIA,UAAU,cAAcoB,M,QCL/BM,EAAU,SAAC,GAAe,IAAb3B,EAAY,EAAZA,MAAY,ECFV,SAACA,GAAU,MAETR,mBAAS,CAE/BuB,KAAM,GACNa,SAAS,IALsB,mBAE5BC,EAF4B,KAErBC,EAFqB,KAyBnC,OAhBAC,qBAAU,WAENvB,EAAQR,GACHgC,MAAK,SAAAC,GAGFH,EAAS,CAELf,KAAMkB,EACNL,SAAS,SAKtB,CAAC5B,IAEG6B,EDjB2BK,CAAalC,GAAjCsB,EANoB,EAM1BP,KAAca,EANY,EAMZA,QAKtB,OACI,oCACI,gCAAM5B,EAAN,KAEC4B,GAAW,kBAAC,IAAD,MAHhB,KAQI,yBAAK3B,UAAU,aAIPqB,EAAOL,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,KACLD,UEKjBkB,G,MAhCM,WAAM,MAKW5C,mBAAS,CAAC,UALrB,mBAKlB6C,EALkB,KAKNC,EALM,KAOzB,OACE,oCACE,wBAAIrC,UAAU,yDAAd,iBAEA,kBAAC,EAAD,CAAaV,cAAe+C,IAC5B,6BAKA,4BAEID,EAAWpB,KAAI,SAAAsB,GAAQ,OAErB,kBAAC,EAAD,CACEJ,IAAKI,EACLvC,MAAOuC,W,MCpBrBC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.8cf33fb8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n\r\n  const [inputValue, setInputValue] = useState(''); //Si no se pone el string vacio en el use a un error de que el componente está cambiando incontroladamente, este error es debido a que si no se pone nada el valor es undefined por ende el valor del input value es undefined\r\n\r\n  //Con esta función lo que se quiere hacer es que se escriba algo en la caja de texto y se presione para que muestre algo\r\n  const handleSubmit = (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategorias((categ) => [inputValue, ...categ]);\r\n      setInputValue(\"\");\r\n    }\r\n    // console.log(\"Submit hecho\");\r\n  };\r\n\r\n  // Con esta función ya se puede cambiar el valor dentro del input. \r\n  const handleInputChance = (e) => {\r\n\r\n\r\n    setInputValue(e.target.value);\r\n  };\r\n  return (\r\n\r\n    (\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          //Atributos\r\n          className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"\r\n          value={inputValue}\r\n          onChange={handleInputChance}\r\n        />\r\n      </form>\r\n    )\r\n  );\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\r\n\r\n  setCategorias: PropTypes.func.isRequired,\r\n};\r\n","\r\n    // Se necesita la categoria por eso se manda por argumento\r\n    export const getGifs = async ( categ) => {\r\n\r\n        //A la url le agregamos `` y luego cambiamos Rick+adn+Morty por ${ category }, pero ya que la categoría tiene espacios Rick and Morty, entonces hay que escaparlo para que la petición sea correcta , para eso se utiliza. Una vez que hacemos esto aparecen las imagenes de dragon ball ya que estamos mandando la categ al API\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=CA4J6lcxJMzqSiSYilHjueQoiPBfJEia&q=${encodeURI(categ)}&limit=10`\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();// Como necesito la data que viene dentro de la esa data puedo usar desestructuración { data }. Porque es una información en formato JSON la que me recibe esto \r\n\r\n\r\n        const gifs = data.map(img => {\r\n            return { \r\n                cod: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url \r\n\r\n            }\r\n\r\n        })\r\n \r\n        return gifs;\r\n    }\r\n\r\n","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({ cod, title, url }) => { //Recibe las propiedades de las imagenes de GifGrid //El cod si quiere se puede quitar porque no se está usando acá\r\n\r\n    // console.log(cod, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInX\">\r\n            <img src={url} className=\"card-img-top\" alt={title} />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{title}</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// TAREA. Seccion# 8, Video 88\r\n// 1. Enzime. (Instalar desde la pagina). npm i --save-dev enzyme enzyme-adapter-react-16\r\n// 2. Enzime to JSON\r\n// 3. Debe mostrar el componente correctamente\r\n//     A)Shallow\r\n//     b)Wrapper\r\n//     c)Wrapper .toMatchSnapshot()\r\n\r\n// Seccion#8, video 89\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { Spinner } from 'react-awesome-spinners';\r\n\r\n\r\nexport const GifGrid = ({ categ }) => {// 1.Recibe la categoría como argumento\r\n\r\n    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    // data: images es para renombrar data, data ahora es images, se puede utlizar data pero es bueno saber que para renombrar en la desestructuración agregamos el nombre quetiene actualmente \":\" seguido del nuevo nombre que queremos asignar a esa propiedad, por lo que images es el nuevo nombre de data.\r\n    //Hace el llamado a la función useFetchGifs(categ) por lo que se redirige al archivo useFetchGifs.js\r\n    const { data: images, loading } = useFetchGifs(categ); //El categ lo estoy enviando a useFetchGifs.js, para hacer uso de ella en dicho archivo\r\n\r\n\r\n    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    return (\r\n        <>\r\n            <h2> {categ} </h2>\r\n\r\n            {loading && <Spinner />}  {/*En lugar de utilizar un operador ternario, utilizamos un operador And, por lo que sería como \r\n            decir si loading===true entonces ponga el Spinner, de lo contrario no ponga nada, pero no debemos especificar que no ponga \r\n            nada en cambio con el operador ternario si tendriamos que poner null para que no muestre nada, por lo que es una forma más corta utilizar &&*/}\r\n            {/* El Spinner lo agregué por mi cuenta, hice la importación respectiva para utlizarlo*/ }\r\n            \r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    //Aquí en lugar de \"data\" ahora utilizamos el nuevo nombre \"images\"\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.cod}// Siempre se agrega el key para que no presente error\r\n                            {...img}//Envíe un objeto con las propiedades independientes id, title , url\r\n                        />\r\n\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (categ) => { //categ lo recibo como si fuera una prop desde GifGrid.js\r\n\r\n    const [state, setstate] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => { // El useEffect(async()=>{}) no puede recibir un async porque esperan algo sincrono\r\n\r\n        getGifs(categ)//getGifs hace la petición HTTP\r\n            .then(imgs => { //then es lo que regresa si todo salió bien, en este caso regresa las imagenes\r\n\r\n\r\n                setstate({ //Cuando tenemos la data llamamos setState para cambiar la información, ya que la data se inicializa en [] y con este setState va a disparar una renderización en el componente GifGrid\r\n\r\n                    data: imgs, // imgs son las imagenes, es un arreglo de imagenes\r\n                    loading: false\r\n                });\r\n\r\n            })\r\n\r\n    }, [categ]); // Se hace el efecto para que solo se dispare cuando cambia la categoria [categ]\r\n\r\n    return state;\r\n}\r\n","\r\nimport React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  // Creando las categorias\r\n\r\n  //Creamos un hook useState\r\n  const [categories, setCategories] = useState(['Ranma']);// Se utiliza solo una categoría para no tener duplicidad en lo que se va  a hacer\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"display-1 animate__animated animate__lightSpeedInLeft\"> GifExpertApp</h1>\r\n      {/*Exportamos la función setCategories al archivo AddCategory \"setCategories = {setCategories}\"  */}\r\n      <AddCategory setCategorias={setCategories} />\r\n      <hr></hr>\r\n\r\n\r\n\r\n      {/* Mostrar las categorias en una lista ordenada */}\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n\r\n            <GifGrid\r\n              key={category}\r\n              categ={category} /> // Se va a enviar la categ que va a ser igual a category(la categoria que está evaluando en ese momento)\r\n\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}